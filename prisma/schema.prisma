// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  role       UserRole @default(SEEKER)
  isVerified Boolean  @default(false)

  profile Profile?
  rooms      Room[]          
  favorites  Favorite[]
  bookings   Booking[]
  reviews    Review[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Profile {
  id                  String    @id @default(uuid())
  //basic
  phone               String?   @unique
  profilePic          String?
  dateOfBirth         DateTime?
  gender              Gender?
  citizenshipID       String?   @unique
  citizenshipFrontImg String?
  citizenshipBackImg  String?
  address             String?

  //preference
  preferredAddress String?
  latitude      Float?
  longitude     Float?
  maxBudget     Int?
  minBudget     Int?
  preferredRoomType   RoomType?
  amenityPreferences  String[] 

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([preferredAddress])
  @@index([latitude, longitude])
}
model Room {
  id          String   @id @default(uuid())
  title       String
  description String
  address     String
  latitude    Float
  longitude   Float
  price       Int
  available   Boolean   @default(true)
  roomType    RoomType  @default(SINGLE)
  
  images      String[]
  amenities   String[]

  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  favorites    Favorite[]
  bookings     Booking[]
  reviews      Review[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([latitude, longitude]) 
  @@index([price])
  @@index([available])
  @@index([roomType])
}
model Favorite {
  id        String   @id @default(uuid())
  userId    String
  roomId    String

  user      User     @relation(fields: [userId], references: [id])
  room      Room     @relation(fields: [roomId], references: [id])

  savedAt   DateTime @default(now())

  @@unique([userId, roomId]) // one room can be favorited only once per user
}
model Booking {
  id        String         @id @default(uuid())

  // Who booked
  userId    String
  user      User           @relation(fields: [userId], references: [id])

  // What room was booked
  roomId    String
  room      Room           @relation(fields: [roomId], references: [id])

  status    BookingStatus  @default(PENDING)
  
  // Booking dates
  checkInDate  DateTime?
  checkOutDate DateTime?
  
  // Additional info
  message      String?     
  responseMessage String?

  bookedAt     DateTime     @default(now())
  respondedAt  DateTime?    
  
  @@index([status])
  @@index([bookedAt])
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      // 1 to 5
  comment   String?

  userId    String
  roomId    String

  user      User     @relation(fields: [userId], references: [id])
  room      Room     @relation(fields: [roomId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, roomId])
}

//-----enums-----
enum UserRole {
  OWNER
  SEEKER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum RoomType {
  SINGLE
  DOUBLE
  FLAT
  APARTMENT
  HOSTEL
}
enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  COMPLETED
}